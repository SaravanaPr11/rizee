"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: !0 });
}, __copyProps = (to, from, except, desc) => {
  if (from && typeof from == "object" || typeof from == "function")
    for (let key of __getOwnPropNames(from))
      !__hasOwnProp.call(to, key) && key !== except && __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: !0 }), mod);
var useStackedZIndex_exports = {};
__export(useStackedZIndex_exports, {
  useStackedZIndex: () => useStackedZIndex
});
module.exports = __toCommonJS(useStackedZIndex_exports);
var import_react = require("react"), import_context = require("./context"), ZIndicesByContext = {}, useStackedZIndex = function(props) {
  var _ZIndicesByContext, _stackLayer, { stackZIndex, zIndex: zIndexProp } = props, id = (0, import_react.useId)(), stackingContextLevel = (0, import_react.useContext)(import_context.ZIndexStackContext), stackLayer = stackZIndex === "global" ? 0 : stackingContextLevel, hardcoded = (0, import_react.useContext)(import_context.ZIndexHardcodedContext);
  (_ZIndicesByContext = ZIndicesByContext)[_stackLayer = stackLayer] || (_ZIndicesByContext[_stackLayer] = {});
  var stackContext = ZIndicesByContext[stackLayer], zIndex = (0, import_react.useMemo)(function() {
    if (typeof zIndexProp == "number")
      return zIndexProp;
    if (stackZIndex) {
      if (hardcoded)
        return hardcoded + 1;
      var highest = Object.values(stackContext).reduce(function(acc, cur) {
        return Math.max(acc, cur);
      }, 0), found = stackLayer * 5e3 + highest + 1;
      return typeof stackZIndex == "number" ? stackZIndex + found : found;
    }
    return 1;
  }, [
    stackLayer,
    zIndexProp,
    stackZIndex
  ]);
  return (0, import_react.useEffect)(function() {
    if (stackZIndex)
      return stackContext[id] = zIndex, function() {
        delete stackContext[id];
      };
  }, [
    zIndex
  ]), zIndex;
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  useStackedZIndex
});
//# sourceMappingURL=useStackedZIndex.js.map
